"""
–ö–∞–∂–¥—ã–π n-—ã–π —ç–ª–µ–º–µ–Ω—Ç
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Å–∏–º–≤–æ–ª—ã –∏ —á–∏—Å–ª–æ n. –ò–∑ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫.
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑–¥–µ–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–¥—Å–ø–∏—Å–∫–∏ —Ç–∞–∫, —á—Ç–æ n –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç
—Ä–∞–∑–Ω—ã–º –ø–æ–¥—Å–ø–∏—Å–∫–∞–º.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Å–∏–º–≤–æ–ª—ã, –æ—Ç–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª–æ–º –ø—Ä–æ–±–µ–ª–∞ –∏ —á–∏—Å–ª–æ n –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π
—Å—Ç—Ä–æ–∫–µ.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è 1 —Ç–µ—Å—Ç–∞.

Sample Input 1:

a b c d e f g h i j k l m n
3
Sample Output 1:

[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]
Sample Input 2:

a b c d e f g h i j k l m n
2
Sample Output 2:

[['a', 'c', 'e', 'g', 'i', 'k', 'm'], ['b', 'd', 'f', 'h', 'j', 'l', 'n']]
Sample Input 3:

a b c d e f g h i j k l m n
1
Sample Output 3:

[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n']]
"""

# C = input().split()
# n = int(input())
# def list_slice(S, step):
#     return [S[i::step] for i in range(step)]
# print(list_slice(C,n))

# s = input().split()
# n = int(input())
# res = []
# for i in range(n):
#     res.append(s[i::n])
# print(res)


# s = input().split()
# n = int(input())
# res = [[] for _ in range(n)]
# for i in range(len(s)):
#     res[i % n].append(s[i])
# print(res)


# st = input().split()
# n = int(input())
#
# st1 = []
#
# for i in range(n):
#     st1.append(st[i::n])
#
# print(st1)

'''–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤ –æ–±–ª–∞—Å—Ç–∏ 2
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∑–∞—à—Ç—Ä–∏—Ö–æ–≤–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—ë—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ, –∑–∞—Ç–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∑–∞—à—Ç—Ä–∏—Ö–æ–≤–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –≠–ª–µ–º–µ–Ω—Ç—ã –ø–æ–±–æ—á–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏ —Ç–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è.

Sample Input 1:

3
1  4  5
6  7  8
1  1  6
Sample Output 1:

8
Sample Input 2:

4
0  1  4  6
0  0  2  5
0  0  0  7
0  0  0  0
Sample Output 2:

7
'''
# n = int(input())
# matrix = []
# for i in range(n):
#     temp = [int(num) for num in input().split()]
#     matrix.append(temp)
# t_max = max([matrix[j][i] for i in range(0,len(matrix)) for j in range(i+1)])
# print(t_max)

# n = int(input())
# m = [list(map(int, input().split())) for _ in range(n)]
# print(max(m[i][j] for i in range(n) for j in range(n) if i >= n - 1 -j))

# n = int(input())
# matrix = [[int(x) for x in input().split()] for _ in range(n)]
# lst = []
# for i in range(n):
#     lst.append(max(matrix[i][n-i-1:]))
# print(max(lst))


'''–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä—É–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—ë—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ, –∑–∞—Ç–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ ‚Äî –º–∞—Ç—Ä–∏—Ü–∞, –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã –∑–∞–º–µ–Ω–æ–π —Å—Ç—Ä–æ–∫ –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ó–∞–¥–∞—á—É –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. 

Sample Input 1:

3
1 2 3
4 5 6
7 8 9
Sample Output 1:

1 4 7
2 5 8
3 6 9'''


# n = int(input())
# matrix = []
# for i in range(n):
#     temp = [int(num) for num in input().split()]
#     matrix.append(temp)
# for row in [*zip(*matrix)]:
#     print(*row)



# n,maxim=int(input()),0
# m=[[int(i) for i in input().split()] for _ in range(n)]
# for i in range(n):
#     for j in range(n):
#         print(m[j][i],end=' ')
#     print()


# n = int(input())
# m = [list(map(int, input().split())) for _ in range(n)]
# [print(*s) for s in [[m[j][i] for j in range(n)] for i in range(n)]]


# n = int(input())
# matrix = [list(map(int, input().split())) for i in range(n)]
#
# for i in zip(*matrix):
#     print(*i)

'''–°–Ω–µ–∂–∏–Ω–∫–∞
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–µ—á–µ—Ç–Ω–æ–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–º 
n√ón –∑–∞–ø–æ–ª–Ω–∏–≤ –µ—ë —Å–∏–º–≤–æ–ª–∞–º–∏ . . –ó–∞—Ç–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–∏–º–≤–æ–ª–∞–º–∏ * —Å—Ä–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –∏ —Å—Ç–æ–ª–±–µ—Ü –º–∞—Ç—Ä–∏—Ü—ã, –≥–ª–∞–≤–Ω—É—é –∏ –ø–æ–±–æ—á–Ω—É—é 
–¥–∏–∞–≥–æ–Ω–∞–ª—å –º–∞—Ç—Ä–∏—Ü—ã. –í—ã–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É –Ω–∞ —ç–∫—Ä–∞–Ω, —Ä–∞–∑–¥–µ–ª—è—è —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–±–µ–ª–∞–º–∏.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–µ—á–µ—Ç–Ω–æ–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (n>3) ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.

Sample Input 1:

5
Sample Output 1:

* . * . *
. * * * .
* * * * *
. * * * .
* . * . *'''


# n = int(input())
# a = [["."] * n for i in range(n)]
# for i in range(n):
#     a[i][i] = "*"
#     a[n - 1 - i][i] = "*"
#     a[i][n//2] = "*"
#     a[n//2][i] = "*"
# print('\n'.join([' '.join([str(i) for i in row]) for row in a]))

# n = int(input())
# res = [['*' if i == j or i+1+j == n or i == n//2  or j == n//2 else '.' for j in range(n)] for i in range(n)]
#
# for r in res:
#     print(*r, sep = ' ')


# n = int(input())
# arr = [['.'] * n for _ in range(n)]
# mid = n // 2
# for i in range(n):
#     for j in range(n):
#         if i == j or i == n - j - 1 or i == mid or j == mid:
#             arr[i][j] = '*'
#     print(*arr[i])

# n = int(input())
# m = [['.'] * n for _ in range(n)]
# for i in range(n):
#     m[i][i] = '*'
#     m[i][n - 1 - i] = '*'
#     m[n // 2][i] = '*'
#     m[i][n // 2] = '*'
# [print(*s) for s in m]


'''–°–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ–±–æ—á–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—ë—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ, –∑–∞—Ç–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ YES, –µ—Å–ª–∏ –º–∞—Ç—Ä–∏—Ü–∞ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞, –∏ —Å–ª–æ–≤–æ NO –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

Sample Input 1:

3
0  3  10
4  9  3
7  4  0
Sample Output 1:

YES
Sample Input 2:

3
0  1  2
1  2  7
2  3  4
Sample Output 2:

NO'''

# n = int(input())
# matrix = []
# h=('')
# for i in range(n):
#     temp = [int(num) for num in input().split()]
#     matrix.append(temp)
#
# for k in range(0,n):
#     for l in range(0,n-k-1):
#         if matrix[k][l] != matrix[n-l-1][n-k-1]:
#             h = ('False')
#             break
# if h != ('False'):
#     print('YES')
# else:
#     print('NO')


# n=int(input())
# m=list()
# for i in range(n):
#     m.append(list(map(int,input().split())))
# res="YES"
# for i in range(n):
#     for j in range(n):
#         if m[i][j]!=m[~j][~i]:
#             res="NO"
# print(res)
#

# n = int(input())
# is_symmetric = True
# t = [input().split() for _ in range(n)]
# for i in range(n):
#     for j in range(n - 1 - i):
#         if t[i][j] != t[n - 1 - j][n - 1 - i]:
#             is_symmetric = False
#             break
#     if not is_symmetric:
#         break
# print('YES' if is_symmetric else 'NO')

# n = int(input())
# matrix = [[int(i) for i in input().split()] for _ in range(n)]
# flag = 'YES'
# for i in range(n):
#     for j in range(n):
#         if matrix[i][j] != matrix[n - j - 1][n - i - 1]:
#             flag = 'NO'
#             break
#     if flag == 'NO':
#         break
# print(flag)

'''–õ–∞—Ç–∏–Ω—Å–∫–∏–π –∫–≤–∞–¥—Ä–∞—Ç üå∂Ô∏è
–õ–∞—Ç–∏–Ω—Å–∫–∏–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º –ø–æ—Ä—è–¥–∫–∞ nn –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–æ–º n√ón, –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ –∫–∞–∂–¥—ã–π —Å—Ç–æ–ª–±–µ—Ü –∫–æ—Ç–æ—Ä–æ–π 
—Å–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ n. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞–Ω–Ω–∞—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ 
–ª–∞—Ç–∏–Ω—Å–∫–∏–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—ë—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ, –∑–∞—Ç–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã:
 n —Å—Ç—Ä–æ–∫, –ø–æ n —á–∏—Å–µ–ª –≤ –∫–∞–∂–¥–æ–π, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ YES, –µ—Å–ª–∏ –º–∞—Ç—Ä–∏—Ü–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∞—Ç–∏–Ω—Å–∫–∏–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º, –∏ —Å–ª–æ–≤–æ NO, –µ—Å–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è.

Sample Input 1:

4
2 3 4 1
3 4 1 2
4 1 2 3
1 2 3 4
Sample Output 1:

YES
Sample Input 2:

3
1 2 3
3 2 1
2 3 4
Sample Output 2:

NO'''

# n = int(input())
# lst = []
# for i in range(n):
#     temp = [int(num) for num in input().split()]
#     lst.append(temp)
#
# def checklatin(latin) :
#
#     numbers = set(range(1, len(latin) + 1))
#
#     if (any(set(row) != numbers for row in latin) or any(set(col) != numbers for col in zip(*latin))) :
#         print ("NO")
#
#     else:
#         print ("YES")
#
# checklatin(lst)

# n = int(input())
# m = [[int(x) for x in input().split()] for _ in range(n)]
# mt = [m[c].copy() for c in range(len(m))]
# for i in range(n):
#     for j in range(n):
#         mt[i][j] = m[j][i]
# sort = list(range(1,n+1))
# ans = 'YES'
# for i in range(n):
#     if sort != sorted(m[i]) or sort != sorted(mt[i]):
#         ans = 'NO'
#         break
# print(ans)

# s = [[int(j) for j in input().split()] for i in range(int(input()))]
# n = list(range(1, len(s)+1))
# y = 1
# for i in range(len(s)):
#     if sorted(s[i]) != n:
#         y = 0
# s1 = [['0'] * len(s) for _ in range(len(s))]
# for i in range(len(s)):
#     for j in range(len(s)):
#         s1[i][j] = s[j][i]
# for i in range(len(s1)):
#     if sorted(s1[i]) != n:
#         y = 0
# print('YES' if y == 1 else 'NO')


'''–•–æ–¥—ã —Ñ–µ—Ä–∑—è
–ù–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–µ 8√ó8 —Å—Ç–æ–∏—Ç —Ñ–µ—Ä–∑—å. –û—Ç–º–µ—Ç—å—Ç–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–µ—Ä–∑—è –Ω–∞ –¥–æ—Å–∫–µ –∏ –≤—Å–µ –∫–ª–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—å–µ—Ç —Ñ–µ—Ä–∑—å. –ö–ª–µ—Ç–∫—É, 
–≥–¥–µ —Å—Ç–æ–∏—Ç —Ñ–µ—Ä–∑—å, –æ—Ç–º–µ—Ç—å—Ç–µ –±—É–∫–≤–æ–π Q, –∫–ª–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—å–µ—Ç —Ñ–µ—Ä–∑—å, –æ—Ç–º–µ—Ç—å—Ç–µ —Å–∏–º–≤–æ–ª–∞–º–∏ *, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–ª–µ—Ç–∫–∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ 
—Ç–æ—á–∫–∞–º–∏.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ñ–µ—Ä–∑—è –Ω–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–µ –≤ —à–∞—Ö–º–∞—Ç–Ω–æ–π –Ω–æ—Ç–∞—Ü–∏–∏ (—Ç–æ –µ—Å—Ç—å –≤ –≤–∏–¥–µ e4, –≥–¥–µ —Å–Ω–∞—á–∞–ª–∞ 
–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ (–±—É–∫–≤–∞ –æ—Ç a –¥–æ h, —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ), –∑–∞—Ç–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (—Ü–∏—Ñ—Ä–∞ –æ—Ç 11 –¥–æ 88, —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)).

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å–∫–∏, —Ä–∞–∑–¥–µ–ª—è—è —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–æ–±–µ–ª–∞–º–∏.

Sample Input 1:

c4
Sample Output 1:

. . * . . . * .
. . * . . * . .
* . * . * . . .
. * * * . . . .
* * Q * * * * *
. * * * . . . .
* . * . * . . .
. . * . . * . .'''

from math import fabs

# board = [['.'] * 8 for _ in range(8)]
# pos = input()
# g =  int(pos[1])   # —Å—Ç—Ä–æ—á–∫–∞
# v = 'abcdefgh'.find(pos[0])   # —Å—Ç–æ–ª–±–µ—Ü
#
#
# board[v][g - 1] = 'Q'
#
# for i in range(0, 8):
#     for j in range(1, 9):
#         if (i != v or j != g) and ((i == v or j == g) or (abs(i - v) == abs(j - g))):
#             board[i][j - 1] = '*'
#
# board = list(zip(*board))
# for x in reversed(board):
#     print(' '.join(x))

# pos = input()
# x = 8 - int(pos[1])
# y = 'abcdefgh'.find(pos[0])
# arr = [['.'] * 8 for _ in range(8)]
# for i in range(8):
#     for j in range(8):
#         if i == x and j == y:
#             arr[i][j] = "Q"
#         elif i == x or j == y or abs(i - x) == abs(j - y):
#             arr[i][j] = "*"
#     print(*arr[i])

# l = input()
# col = l[0]
# st = 8 - int(l[1])
# doska = {'a':0, 'b':1, 'c':2, 'd':3, 'e':4, 'f':5, 'g':6, 'h':7}
# col = doska[col]
# s = [['.'] * 8 for _ in range(8)]
# for i in range(len(s)):
#     for j in range(len(s)):
#         if st == i or col == j or abs(st-i) == abs(col-j):
#             s[i][j] = '*'
# s[st][col] = 'Q'
# [print(*i) for i in s]


'''–î–∏–∞–≥–æ–Ω–∞–ª–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –≥–ª–∞–≤–Ω–æ–π
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–º n√ón –∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç 
–µ—ë –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–∞–≤–∏–ª—É:

–Ω–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –Ω–∞ –º–µ—Å—Ç–µ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å—Ç–æ—è—Ç—å —á–∏—Å–ª–æ 0;
–Ω–∞ –¥–≤—É—Ö –¥–∏–∞–≥–æ–Ω–∞–ª—è—Ö, –ø—Ä–∏–ª–µ–≥–∞—é—â–∏—Ö –∫ –≥–ª–∞–≤–Ω–æ–π, —á–∏—Å–ª–æ 1;
–Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–≤—É—Ö –¥–∏–∞–≥–æ–Ω–∞–ª—è—Ö —á–∏—Å–ª–æ 2, –∏ —Ç.–¥.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —É—Å–ª–æ–≤–∏–µ–º –∑–∞–¥–∞—á–∏.

Sample Input 1:

5
Sample Output 1:

0 1 2 3 4
1 0 1 2 3
2 1 0 1 2
3 2 1 0 1
4 3 2 1 0'''


# n = int(input())
# a = [[abs(i - j) for j in range(n)] for i in range(n)]
# for row in a:
#     print(' '.join([str(i) for i in row]))

# n = int(input())
# arr = [[abs(i - j) for j in range(n)] for i in range(n)]
# for row in arr:
#     print(*row)

# n = int(input())
# a = [[0 for _ in range(n)] for _ in range(n)]
# for i in range(n):
#     for j in range(n):
#         a[i][j] = abs(j-i)
#
# for i in a:
#     print(*i)


'''–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Ä–∞–ª—å—é üå∂Ô∏èüå∂Ô∏è
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ n –∏ m. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞–∑–º–µ—Ä–æ–º n√óm 
–∑–∞–ø–æ–ª–Ω–∏–≤ –µ—ë "—Å–ø–∏—Ä–∞–ª—å—é" –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–±—Ä–∞–∑—Ü–æ–º.
–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –ø–æ–¥–∞—é—Ç—Å—è –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ n –∏ m ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ.
–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –º–∞—Ç—Ä–∏—Ü—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ –æ–±—Ä–∞–∑—Ü–æ–º.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –ü—Ä–∏ –≤—ã–≤–æ–¥–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Ç—Ä–∏—Ü—ã, –æ—Ç–≤–æ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 33 —Å–∏–º–≤–æ–ª–∞ –Ω–∞ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç.
Sample Input 1:

4 5
Sample Output 1:

1  2  3  4  5
14 15 16 17 6
13 20 19 18 7
12 11 10 9  8'''

# r, c = [int(i) for i in input().split()]
# mas = [[0] * c for _ in range(r)]
# i = 0
# j = 0
# num = 1
# right = True
# down = False
# left = False
# up = False

# def zero(mas):
#     for row in mas:
#         if 0 in row:
#             return True
#     return False
#
#
# while zero(mas):
#     if mas[i][j] == 0:
#         mas[i][j] = num
#         num += 1
#
#     if j < c - 1 and mas[i][j + 1] == 0 and right:
#         j += 1
#
#     elif i < r - 1 and mas[i + 1][j] == 0 and down:
#         i += 1
#
#     elif j >= 0 and mas[i][j - 1] == 0 and left:
#         j -= 1
#
#     elif i >= 0 and mas[i - 1][j] == 0 and up:
#         i -= 1
#     elif right:
#         right = False
#         down = True
#
#     elif down:
#         down = False
#         left = True
#
#     elif left:
#         left = False
#         up = True
#
#     elif up:
#         up = False
#         right = True
#
# for row in mas:
#     print(*row)

# n,m = map(int,input().split())
# l = [[0 for i in range(m)] for i in range(n)]
# c = 0
# i = 0
# j = -1
# while c != n*m:
#     while j < m - 1 and l[i][j+1] == 0:   # –¥–≤–∏–≥–∞—é—Å—å –≤–ª–µ–≤–æ
#         j += 1
#         c += 1
#         l[i][j] = c
#     while i < n - 1 and l[i+1][j] == 0:   # –¥–≤–∏–≥–∞—é—Å—å –≤–Ω–∏–∑
#        i += 1
#        c += 1
#        l[i][j] = c
#     while j > 0 and l[i][j-1] == 0 :   # –¥–≤–∏–≥–∞—é—Å—å –≤–ø—Ä–∞–≤–æ
#        j -= 1
#        c += 1
#        l [i][j] = c
#     while i > 0 and l[i - 1][j] == 0:   # –¥–≤–∏–≥–∞—é—Å—å –≤–≤–µ—Ä—Ö
#        i -= 1
#        c += 1
#        l[i][j] = c
# for row in l:
#     print(*row)

# n, c = map(int, input().split()) #—Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü—ã
# m = [[0 for _ in range(c)] for _ in range(n)]
# i_start, i_end, j_start, j_end = 0, n, 0, c   # –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã (–≥—Ä–∞–Ω–∏—Ü—ã) –¥—ã–∏–∂–µ–Ω–∏—è –ø–æ –º–∞—Ç—Ä–∏—Ü–µ
# di, dj = 1, 1  # –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
# k = 1  # –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—è
# i = 0  # –∫–æ—Å—Ç—ã–ª—å –¥–ª—è –∑–∞–¥–∞–Ω–∏—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –ø–µ—Ä–≤–æ–º—É —Ä—è–¥—É
# while k <= n*c:
#     # –∑–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ
#     for j in range(j_start, j_end, dj):
#         m[i][j] = str(k).ljust(3)
#         k += 1
#     dj = -1  # —Å–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
#     i_start += 1  # –æ–±—Ä–µ–∑–∞–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ —Å–≤–µ—Ä—Ö—É
#     if k > n * c:  # –ø—Ä–µ—Ä—ã–≤–∞–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –µ—Å–ª–∏ –∑–∞–æ–ª–Ω–µ–Ω–∞ –≤—Å—è –º–∞—Ç—Ä–∏—Ü–∞
#         break
#     # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–Ω–∏–∑
#     for i in range(i_start, i_end, di):
#         m[i][j] = str(k).ljust(3)
#         k += 1
#     di = -1  # —Å–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
#     j_end -= 1  # –æ–±—Ä–µ–∑–∞–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ —Å–ø—Ä–∞–≤–∞
#     if k > n * c: # –ø—Ä–µ—Ä—ã–≤–∞–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –µ—Å–ª–∏ –∑–∞–æ–ª–Ω–µ–Ω–∞ –≤—Å—è –º–∞—Ç—Ä–∏—Ü–∞
#         break
#     # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–ª–µ–≤–æ
#     for j in range(j_end - 1, j_start - 1, dj):
#         m[i][j] = str(k).ljust(3)
#         k += 1
#     dj = 1  # —Å–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
#     i_end -= 1 # –æ–±—Ä–µ–∑–∞–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞ —Å–Ω–∏–∑—É
#     if k > n * c: # –ø—Ä–µ—Ä—ã–≤–∞–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ –µ—Å–ª–∏ –∑–∞–æ–ª–Ω–µ–Ω–∞ –≤—Å—è –º–∞—Ç—Ä–∏—Ü–∞
#         break
#     # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
#     for i in range(i_end - 1, i_start - 1, di):
#         m[i][j] = str(k).ljust(3)
#         k += 1
#     di = 1  # —Å–º–µ–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
#     j_start += 1 # –æ–±—Ä–µ–∑–∞–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ —Å–ª–µ–≤–∞
# for i in m:
#     print(*i)
#
# # put your python code here
# n, m = [int(_) for _ in input().split()]
# matrix = []
#
# for i in range(n):
#     temp = [0] * m
#     matrix.append(temp)
#
# num = 1
#
# def one_side(a, b, step, r, c):
#     # a - –Ω–∞—á. –∑–Ω–∞—á. —Ü–∏–∫–ª–∞, b - –∫–æ–Ω. –∑–Ω–∞—á. —Ü–∏–∫–ª–∞, step - —à–∞–≥
#     # r - –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Ç—Ä–∏—Ü—ã
#     # —Å - –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –º–∞—Ç—Ä–∏—Ü—ã
#     # –µ—Å–ª–∏ r –∏–ª–∏ c —Ä–∞–≤–Ω–æ 'v', —Ç–æ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ü–∏–∫–ª–∞
#     global num
#     for i in range(a, b, step):
#         if c == 'v':
#             matrix[r][i] = num
#         elif r == 'v':
#             matrix[i][c] = num
#         num += 1
#     return i
#
# for i in range(int(n / 2) + 1):
#     j = one_side(i, m - i, 1, i, 'v')  # –≤–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
#     if num > n * m:
#         break
#     k = one_side(i + 1, n - i, 1, 'v', j)  # –ø—Ä–∞–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
#     if num > n * m:
#         break
#     x = one_side(m - i - 2, i - 1, -1, k, 'v')  # –Ω–∏–∂–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
#     if num > n * m:
#         break
#     one_side(n - i - 2, i, -1, 'v', i)  # –ª–µ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
#     if num > n * m:
#         break
#
# for row in matrix:
#     for j in range(m):
#         print(str(row[j]).ljust(3), end=' ')
#     print()