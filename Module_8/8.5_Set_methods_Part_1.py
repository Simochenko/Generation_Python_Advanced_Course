'''Тема урока: методы множеств
Метод добавления элемента add()
Методы удаления элементов remove(), discard(), pop()
Метод удаления всех элементов clear()
Аннотация. Урок посвящен методам добавления и удаления элементов множеств.

Добавление элементов
Мы научились создавать множества, элементы которых известны на этапе создания. Следующий шаг – научиться добавлять
элементы в уже существующие множества.

Метод add()
Для добавления нового элемента в множество используется метод add().

Следующий программный код:

numbers = {1, 1, 2, 3, 5, 8, 3}  # создаем множество

numbers.add(21)  # добавляем число 21 в множество
numbers.add(34)  # добавляем число 34 в множество

print(numbers)
выводит (порядок элементов может отличаться):

{1, 2, 3, 34, 5, 8, 21}
   Не забывайте, что порядок элементов при выводе множества абсолютно произвольный.

Обратите внимание, для использования метода add() требуется предварительно созданное множество, при этом оно может
 быть пустым.

Следующий программный код:

numbers = set()  # создаем пустое множество

numbers.add(1)
numbers.add(2)
numbers.add(3)
numbers.add(1)

print(numbers)
выводит (порядок элементов может отличаться):

{1, 2, 3}
Если требуется внести несколько значений в множество, то можно воспользоваться циклом for.

Следующий программный код:

numbers = set()  # создаем пустое множеств

for i in range(10):
    numbers.add(i*i + 1)

print(numbers)
выводит (порядок элементов может отличаться):

{1, 2, 65, 5, 37, 10, 17, 50, 82, 26}
Удаление элемента
Для удаления элементов из множества используются методы:

    remove();
    discard();
    pop().
Метод remove()
Метод remove() — удаляет элемент из множества с генерацией исключения (ошибки) в случае, если такого элемента нет.

Следующий программный код:

numbers = {1, 2, 3, 4, 5}

numbers.remove(3)
print(numbers)
выводит (порядок элементов может отличаться):

{1, 2, 4, 5}
Следующий программный код:

numbers = {1, 2, 3, 4, 5}

numbers.remove(10)
print(numbers)
приводит к возникновению ошибки KeyError, так как элемент 1010 отсутствует в множестве.

Метод discard()
Метод discard() — удаляет элемент из множества без генерации исключения (ошибки), если элемент отсутствует.

Следующий программный код:

numbers = {1, 2, 3, 4, 5}

numbers.discard(3)
print(numbers)
выводит (порядок элементов может отличаться):

{1, 2, 4, 5}
Следующий программный код:

numbers = {1, 2, 3, 4, 5}

numbers.discard(10)
print(numbers)
не приводит к возникновению ошибки и выводит (порядок элементов может отличаться):

{1, 2, 3, 4, 5}
Метод pop()
Метод pop() — удаляет и возвращает случайный элемент из множества с генерацией исключения (ошибки) при попытке удаления
 из пустого множества.

Рассмотрим программный код:

numbers = {1, 2, 3, 4, 5}

print('до удаления:', numbers)
num = numbers.pop()                 # удаляет случайный элемент множества, возвращая его
print('удалённый элемент:', num)
print('после удаления:', numbers)
Результат работы такого кода случаен, например, такой код может вывести:

до удаления: {1, 2, 3, 4, 5}
удалённый элемент: 1
после удаления: {2, 3, 4, 5}
   Метод pop() можно воспринимать как неконтролируемый способ удаления элементов по одному из множества.

Метод clear()
Метод clear() удаляет все элементы из множества.

Следующий программный код:

numbers = {1, 2, 3, 4, 5}
numbers.clear()

print(numbers)
выведет:

set()
В результате получили пустое множество.

Обратите внимание на то, что пустое множество выводится как set(), а не как {}. С помощью {} выводится пустой словарь.

Примечания
Примечание 1. Если мы не изменяли множество, порядок обхода элементов при помощи цикла for не изменится.

Примечание 2. После изменения множества (методы add(), remove(), и т.д.) порядок элементов может измениться
произвольным образом.'''

# myset = set()
# for i in range(10):
#     if i % 2 == 0:
#
#         myset.add('even')
#     else:
#         myset.add('odd')
# print(len(myset))    #2

'''Уникальные символы 1
Напишите программу для вывода количества уникальных символов каждого считанного слова без учета регистра.

Формат входных данных
На вход программе в первой строке подается число nn – общее количество слов. Далее идут nn строк с словами.

Формат выходных данных
Программа должна вывести на отдельной строке количество уникальных символов для каждого слова.

Sample Input 1:

3
Тимур
Beegeek
АнанАс
Sample Output 1:

5
4
3
Sample Input 2:

5
абОнемЕнТы
дозировка
военкОмат
ДрУжиНник
ОпПозицИя
Sample Output 2:

8
8
8
7
6
'''

# n = int(input())
# for i in [set(input().upper()) for i in range(n)]:
#     print(len(i))

# [print(len(set(input().lower()))) for x in range(int(input()))]
#
# print(*[len(set(input().lower())) for i in range(int(input()))], sep='\n')
#
# for _ in range(int(input())):
#     print(len(set(input().lower())))


'''Уникальные символы 2
Напишите программу для вывода общего количества уникальных символов во всех считанных словах без учета регистра.

Формат входных данных
На вход программе в первой строке подается число nn – общее количество слов. Далее идут nn строк с словами.

Формат выходных данных
Программа должна вывести одно число – общее количество уникальных символов во всех словах без учета регистра.

Sample Input 1:

5
aAa
bB
ccc
dDdd
ppppP
Sample Output 1:

5
Sample Input 2:

4
авТорИтет
небо
машинА
Мёд
Sample Output 2:

13
'''
# n = int(input())
# print(len(set(''.join([input().upper() for _ in range(n)]))))


# print(len(set(''.join([input().lower() for _ in range(int(input()))]))))

# text = ''
# for _ in range(int(input())):
#     text += input().lower()
# print(len(set(text)))


# words = [input().lower() for x in range(int(input()))]
# print(len(set(''.join(words))))


'''Количество слов в тексте
Напишите программу для определения общего количества различных слов в строке текста.

Формат входных данных
На вход программе подается строка текста.

Формат выходных данных
Программа должна вывести одно число – общее количество различных слов в строке без учета регистра.

Примечание 1. Словом считается последовательность непробельных символов, идущих подряд, слова разделены одним или
 большим числом пробелов.

Примечание 2. Знаками препинания .,;:-?! пренебрегаем.

Sample Input 1:

Milk is white and so is glue, Ghosts are white and they say BOO!
Sample Output 1:

11
Sample Input 2:

Snowflakes, snowflakes falling down. Snowflakes, covering up the ground. Making a blanket, soft and white. Making 
a blanket in the night.
Sample Output 2:

15'''

# import re
# words = re.sub(r'[.,;:-?-!]', '', input().upper())
# print(len(set(words.split())))


# text = input().lower()
# for sign in '.,;:-?!':
#     text = text.replace(sign, '')
# print(len(set(text.split())))


# print(len(set(x.strip('.,;:-?!') for x in input().lower().split())))


'''Встречалось ли число раньше?
На вход программе подается строка текста, содержащая числа. Для каждого числа выведите слово YES (в отдельной строке),
 если это число ранее встречалось в последовательности или NO, если не встречалось.

Формат входных данных
На вход программе подается строка текста, содержащая числа, разделенные символом пробела.

Формат выходных данных
Программа должна вывести текст в соответствии с условием задачи.

Sample Input 1:

1 1 2 2 5 5 5 5 6 7 8
Sample Output 1:

NO
YES
NO
YES
NO
YES
YES
YES
NO
NO
NO'''

# numbers = [int(s) for s in input().split()]
# occur_before = set()
# for num in numbers:
#     if num in occur_before:
#         print('YES')
#     else:
#         print('NO')
#         occur_before.add(num)

# s = set()
# for n in input().split():
#     if n in s:
#         print('YES')
#     else:
#         print('NO')
#         s.add(n)

m = set()
for i in input().split():
    print('YES' if i in m else 'NO')
    m.add(i)