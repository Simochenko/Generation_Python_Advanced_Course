'''Тема урока: множества в Python
Встроенные функции len(),sum(),min(),max()
Оператор принадлежности in
Перебор множеств
Форматированный вывод множеств
Сравнение множеств
Аннотация. В этом уроке мы изучим основной функционал при работе с множествами.

Основы работы с множествами
Работа с множествами очень сильно напоминает работу со списками, поскольку и множества, и списки содержат отдельные
элементы, хотя элементы множества уникальны, а списки могут содержать повторяющиеся элементы. Многое из того, что мы
делали со списками, доступно и при работе с множествами.

Функция len()
Длиной множества называется количество его элементов. Чтобы посчитать длину множества используют встроенную
 функцию len() (от слова length – длина).

Следующий программный код:

myset1 = {2, 2, 4, 6, 6}
myset2 = set([1, 2, 2, 3, 3, 4, 4, 5, 5])
myset3 = set('aaaaabbbbccccddd')

print(len(myset1))
print(len(myset2))
print(len(myset3))
выведет:

3
5
4
Оператор принадлежности in
Оператор in позволяет проверить, содержит ли множество некоторый элемент.

Рассмотрим следующий код:

numbers = {2, 4, 6, 8, 10}

if 2 in numbers:
    print('Множество numbers содержит число 2')
else:
    print('Множество numbers не содержит число 2')
Такой код проверяет, содержит ли множество numbers число 22 и выводит соответствующий текст:

Множество numbers содержит число 2
Мы можем использовать оператор in вместе с логическим оператором not. Например

numbers = {2, 4, 6, 8, 10}

if 0 not in numbers:
    print('Множество numbers не содержит нулей')
Оператор принадлежности in работает очень быстро на множествах, намного быстрее чем на списках. Поэтому если требуется
 часто осуществлять поиск в коллекции уникальных данных, то множество – подходящий выбор.

Встроенные функции sum(), min(), max()
Встроенная функция sum() принимает в качестве аргумента множество чисел и вычисляет сумму его элементов.

Следующий программный код:

numbers = {2, 2, 4, 6, 6}
print('Сумма всех элементов множества =', sum(numbers))
выводит:

Сумма всех элементов множества = 12
Встроенные функции min() и max() принимают в качестве аргумента множество и находят минимальный и максимальный элементы
 соответственно.

Следующий программный код:

numbers = {2, 2, 4, 6, 6}
print('Минимальный элемент =', min(numbers))
print('Максимальный элемент =', max(numbers))
выводит:

Минимальный элемент = 2
Максимальный элемент = 6
Примечания
Примечание 1. Индексация и срезы недоступны для множеств.

Примечание 2. Операция конкатенации + и умножения на число * недоступны для множеств.'''

# numbers = {1.414, 12.5, 3.1415, 2.718, 9.8, 1.414, 1.1618, 1.324, 2.718, 1.324}
#
# print(min(numbers)+max(numbers))

# numbers = {20, 6, 8, 18, 18, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 12, 8, 8, 10, 4, 2, 2, 2, 16, 20}
# average = sum(numbers)/len(numbers)
#
# print(average)



'''Перебор элементов множества
Перебор элементов множества осуществляется точно также как и перебор элементов списка, то есть с помощью цикла for.

Для вывода элементов множества каждого на отдельной строке можно использовать следующий код:

numbers = {0, 1, 1, 2, 3, 3, 3, 5, 6, 7, 7}

for num in numbers:
    print(num)
Такой код выведет (порядок элементов может отличаться):

0
1
2
3
5
6
7
Мы также можем использовать операцию распаковки множества.

Приведенный ниже код:

numbers = {0, 1, 1, 2, 3, 3, 3, 5, 6, 7, 7}

print(*numbers, sep='\n')
выводит (порядок элементов может отличаться):

0
1
2
3
5
6
7
Не стоит забывать, что множества – неупорядоченные коллекции, поэтому полагаться на порядок вывода элементов не стоит.
 Если нужно гарантировать порядок вывода элементов (по возрастанию / убыванию), то необходимо воспользоваться
  встроенной функцией sorted().

Приведенный ниже код:

numbers = {0, 1, 1, 2, 3, 3, 3, 5, 6, 7, 7}

sorted_numbers = sorted(numbers)
print(*sorted_numbers, sep='\n')
будет гарантированно выводить элементы множества в порядке возрастания.

Обратите внимание на то, что функция sorted() возвращает отсортированный список, а не множество. Не путайте 
встроенную функцию sorted() и списочный метод sort(). Множества не содержат метода sort().

Сравнение множеств
Множества можно сравнивать между собой. Равные множества имеют одинаковую длину и содержат равные элементы. 
Для сравнения множеств используются операторы == и !=.

Приведенный ниже код:

myset1 = {1, 2, 3, 3, 3, 3}
myset2 = {2, 1, 3}
myset3 = {1, 2, 3, 4}

print(myset1 == myset2)
print(myset1 == myset3)
print(myset1 != myset3)
выводит:

True
False
True
Примечания
Примечание 1. Встроенная функция sorted() имеет опциональный параметр reverse. Если установить этот параметр в 
значение True, произойдет сортировка по убыванию.

Приведенный ниже код:

numbers = {0, 1, 1, 2, 3, 3, 3, 5, 6, 7, 7}

sortnumbers = sorted(numbers, reverse=True)
print(*sortnumbers, sep='\n')
гарантированно выводит:

7
6
5
3
2
1
0
Примечание 2. Код для работы с множествами нужно писать так, чтобы результат его выполнения не зависел от 
расположения элементов и был одинаковым при любом порядке обхода, последовательного обращения ко всем элементам. '''


# Дополните приведенный код, чтобы он вывел сумму квадратов элементов множества numbers.

# numbers = {9089, -67, -32, 1, 78, 23, -65, 99, 9089, 34, -32, 0, -67, 1, 11, 111, 111, 1, 23}
#
# print(sum(i**2 for i in numbers))


# fruits = {'apple', 'banana', 'cherry', 'avocado', 'pineapple', 'apricot', 'banana', 'avocado', 'grapefruit'}
# sortfruits = sorted(fruits, reverse=True)
# print(*sortfruits, sep='\n')


# fruits = {'apple', 'banana', 'cherry', 'avocado', 'pineapple', 'apricot', 'banana', 'avocado', 'grapefruit'}
# print('\n'.join(sorted(fruits, reverse=True)))

'''Количество различных символов
На вход программе подается строка текста. Напишите программу, которая определяет количество различных символов в строке.

Формат входных данных
На вход программе подается строка текста.

Формат выходных данных
Программа должна вывести количество различных символов в строке.

Примечание. Задачу можно решить в одну строчку кода.

Sample Input 1:

12345678910
Sample Output 1:

10
Sample Input 2:

ab bc
Sample Output 2:

4'''


# myset = set(input())
# print(len(myset))

# print(len(set(input())))

'''Неповторимые цифры
На вход программе подается число. Необходимо определить, верно ли, что в его записи ни одна из цифр не повторяется?

Формат входных данных
На вход программе подается натуральное число.

Формат выходных данных
Программа должна вывести YES если ни одна из цифр в числе не повторяется и NO в противном случае.

Sample Input 1:

1093482
Sample Output 1:

YES
Sample Input 2:

10000000
Sample Output 2:

NO'''

# myset = input()
# s= len(myset)
# g = len(set(myset))
# if s == g:
#     print("YES")
# else:
#     print("NO")

# n = input()
# print('YES') if len(n) == len(set(n)) else print('NO')

'''Все 10 цифр
На вход программе подаются два числа. Необходимо определить, верно ли, что в записи этих двух чисел используются все 
десять цифр?

Формат входных данных
На вход подаются два натуральных числа, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести YES, если в записи этих двух чисел используются все десять цифр, и NO в противном случае.

Sample Input 1:

12387
94230
Sample Output 1:

NO
Sample Input 2:

0193
2465748
Sample Output 2:

YES'''

# myset1 = input()
# myset2 = input()
# g1 = (myset1) + (myset2)
# g2 = len(set(g1))
# if g2 == 10:
#     print("YES")
# else:
#     print("NO")

# print('YES' if len(set(input() + input())) == 10 else 'NO')

# num = set(input() + input())
# [print('NO') if len(num) < 10 else print('YES')]


# print('YES' if set(range(10)) == {int(_) for _ in input() + input()} else 'NO')

'''Одинаковые наборы
На вход программе подаются два числа. Необходимо определить, верно ли, что для записи этих чисел были использованы
 одинаковые наборы цифр?

Формат входных данных
На вход подаются два натуральных числа, каждое на отдельной строке.

Формат выходных данных
Программа должна вывести YES, если для записи этих чисел были использованы одинаковые наборы цифр и NO, в противном
 случае.

Sample Input 1:

0943
9304
Sample Output 1:

YES
Sample Input 2:

1
2
Sample Output 2:

NO
Sample Input 3:

327428
824723
Sample Output 3:

YES'''

# myset1 = set(input())
# myset2 = set(input())
# if myset2 == myset1:
#     print("YES")
# else:
#     print("NO")

# print('YES' if set(input()) == set(input()) else 'NO')

# print(['NO', 'YES'][set(input()) == set(input())])

'''Три слова
На вход программе подается строка, состоящая из трех слов. Верно ли, что для записи всех трех слов был использован
 один и тот же набор букв?

Формат входных данных
На вход программе подается строка, состоящая из трех слов.

Формат выходных данных
Программа должна вывести YES, если для записи всех трех слов был использован один и тот же набор букв и NO в противном
 случае.

Sample Input 1:

автор товар отвар
Sample Output 1:

YES
Sample Input 2:

шарада баллада услада
Sample Output 2:

NO
Sample Input 3:

сорт торс трос
Sample Output 3:

YES'''

# s = input().split()
# str = s[0]
# str1 = s[1]
# str2 = s[2]
# if set(str) == set(str1) == set(str2):
#     print("YES")
# else:
#     print("NO")

# a, b, c = map(str, input().split())
# print('YES' if set(a) == set(b) == set(c) else 'NO')

set1, set2, set3 = (set(el) for el in input().split())
print('YES' if set1 == set2 == set3 else 'NO')